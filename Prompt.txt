🧠 Full Descriptive Prompt for Building an Advanced MERN Stack To-Do Application
Title: Advanced Full-Stack To-Do Application with Productivity Features
Stack: MERN (MongoDB, Express.js, React.js, Node.js) + Tailwind CSS + JWT + Cloudinary + optional Socket.io/PWA

📌 1. Project Overview
Create a fully-featured and responsive Advanced To-Do App using the MERN stack. The application should support secure user authentication, robust task management, productivity tools, real-time collaboration, and modern UI/UX features like drag-and-drop, dark mode, and analytics.

🔐 2. User Authentication and Account Management
Implement JWT-based authentication (access + refresh tokens).

Allow sign up and login via email + password.

Use bcrypt for password hashing.

Support password reset via email with unique token links.

Integrate OAuth login via Google and GitHub (use Passport.js or Firebase Auth).

Allow profile management: update display name and upload avatar (stored in Cloudinary).

Store user sessions securely using httpOnly cookies.

📝 3. Task Management System
Create a robust system to manage user-specific tasks with the following capabilities:

Basic Task CRUD
Create, read, update, delete tasks

Only allow authenticated users to access their tasks

Tasks should include:

Title (required)

Description

Priority (High, Medium, Low)

Due Date & Time

Completion status

Category/Label (e.g., Work, Personal)

Advanced Task Features
Add subtasks (nested or checklist style) under a main task

Upload and attach files (PDFs, images, etc.) to a task (stored via Cloudinary)

Support task reminders (browser notifications; email reminders optional)

Add recurring tasks (daily, weekly, monthly)

Set custom sorting options: by priority, due date, creation time

Full-text search for task content and title

Filter tasks by:

Category

Status (completed, pending)

Due date (today, overdue, upcoming)

🧠 4. Smart UX and Interaction Features
Implement features to improve usability and interactivity:

Enable drag-and-drop task reordering using react-beautiful-dnd (optionally Kanban-style boards)

Toggle between light and dark mode using local storage or context

Enable auto-save task edits (on blur or interval)

Add an AI-based tag suggestion system that suggests a category based on task content (basic version using keyword match; advanced optional)

📆 5. Time & Scheduling Features
Display a calendar view of tasks using react-calendar or fullcalendar

Show overdue, upcoming, and today’s tasks

Add a Pomodoro Timer on the dashboard for focus sessions

Support task countdowns to the deadline (optional visual timers)

📊 6. Dashboard & Productivity Analytics
Create a dashboard showing insights and charts:

Display a line or bar chart of completed vs. pending tasks (use Chart.js or Recharts)

Weekly summary of:

Total tasks created

Tasks completed per day

Time spent (if you track timers per task)

Progress meters: e.g., “5 of 8 tasks completed today”

👥 7. Collaboration & Real-Time Features (optional)
Enable task sharing with other users (assign task to multiple users)

Add comments on tasks (basic discussion thread)

Show real-time updates with Socket.io (when a task is edited/shared)

Send email notifications when a task is assigned or updated

💾 8. Offline Support & PWA (optional)
Enable offline mode using service workers (Progressive Web App)

Cache user tasks locally and sync when online

Add installable app behavior (manifest.json, icons, etc.)

🗃️ 9. Backend API Design (Express.js)
Create RESTful API endpoints:

Authentication
POST /api/auth/register

POST /api/auth/login

POST /api/auth/forgot-password

POST /api/auth/reset-password

GET /api/auth/google & GET /auth/github (OAuth)

PUT /api/users/:id/profile

Tasks
GET /api/tasks (with filters/sorting/search)

POST /api/tasks

PUT /api/tasks/:id

DELETE /api/tasks/:id

POST /api/tasks/:id/attachments

POST /api/tasks/:id/subtasks

Analytics
GET /api/stats/weekly

GET /api/stats/completion

📁 10. Frontend Stack (React.js + Tailwind CSS)
Use React for SPA structure with the following:

React Router for page navigation

React Context API or Redux for global state

React Query or custom hooks for data fetching

Tailwind CSS for responsive, modern UI

Modular file structure (components/, pages/, hooks/, context/, utils/)

react-toastify or sweetalert2 for alerts

☁️ 11. Deployment Plan
MongoDB Atlas – database

Render / Railway / Heroku – backend deployment

Vercel / Netlify – frontend deployment

Cloudinary – media storage

Mailgun / SendGrid – email service (for password reset/reminders)

🔐 12. Security Best Practices
Sanitize user inputs (express-validator, helmet)

Use dotenv for secrets

Protect routes with middlewares (authMiddleware)

Use httpOnly cookies for refresh tokens

Validate file types & size for uploads

File Structure-


advanced-todo-app/
├── backend/
│   ├── controllers/
│   │   ├── authController.js
│   │   ├── taskController.js
│   │   ├── userController.js
│   │   └── analyticsController.js
│   ├── middleware/
│   │   ├── authMiddleware.js
│   │   ├── errorMiddleware.js
│   │   └── uploadMiddleware.js
│   ├── models/
│   │   ├── User.js
│   │   ├── Task.js
│   │   ├── Subtask.js
│   │   ├── Attachment.js
│   │   └── Notification.js
│   ├── routes/
│   │   ├── authRoutes.js
│   │   ├── taskRoutes.js
│   │   ├── userRoutes.js
│   │   ├── analyticsRoutes.js
│   ├── utils/
│   │   ├── sendEmail.js
│   │   ├── generateToken.js
│   │   └── cloudinaryConfig.js
│   ├── config/
│   │   └── db.js
│   ├── .env
│   ├── server.js
│   └── package.json

├── frontend/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── assets/
│   │   │   └── images/
│   │   ├── components/
│   │   │   ├── TaskCard.js
│   │   │   ├── SubtaskList.js
│   │   │   ├── Sidebar.js
│   │   │   ├── Navbar.js
│   │   │   ├── CalendarView.js
│   │   │   ├── PomodoroTimer.js
│   │   │   └── StatsChart.js
│   │   ├── context/
│   │   │   └── AuthContext.js
│   │   ├── hooks/
│   │   │   └── useTasks.js
│   │   ├── pages/
│   │   │   ├── LoginPage.js
│   │   │   ├── RegisterPage.js
│   │   │   ├── Dashboard.js
│   │   │   ├── TaskDetail.js
│   │   │   ├── Profile.js
│   │   │   └── NotFound.js
│   │   ├── styles/
│   │   │   ├── main.css        ← Normal CSS
│   │   │   └── tailwind.css    ← Tailwind CSS imports
│   │   ├── App.js
│   │   ├── index.js
│   │   ├── router.js
│   │   └── tailwind.config.js
│   ├── postcss.config.js
│   └── package.json

├── README.md
└── .gitignore
